- name: "Scenariusz 7: Firewall Configuration"
  hosts: localhost
  become: true
  vars_files:
    - ../vars/scenario_7.yaml

  tasks:
    - name: Utwórz sieć NAT dla VM
      include_role:
        name: network

    - name: Tworzenie pierwszej VM
      include_role:
        name: vm
      vars:
        vm_name: "{{ vm1_name }}"
        vm_disk: "{{ vm1_disk }}"
        vm_ci_iso: "{{ vm1_ci_iso }}"
        user_data_template: user-data-firewall

    - name: Tworzenie drugiej VM
      include_role:
        name: vm
      vars:
        vm_name: "{{ vm2_name }}"
        vm_disk: "{{ vm2_disk }}"
        vm_ci_iso: "{{ vm2_ci_iso }}"
        user_data_template: user-data-firewall

    - name: Pobierz IP pierwszej VM
      shell: virsh domifaddr {{ vm1_name }} | grep -oP '(\d{1,3}\.){3}\d{1,3}' | head -n1
      register: vm1_ip_result
      retries: 10
      delay: 3
      until: vm1_ip_result.stdout != ""
      changed_when: false

    - name: Poczekaj aż port SSH (22) będzie otwarty
      wait_for:
        host: "{{ vm1_ip_result.stdout }}"
        port: 22
        delay: 5
        timeout: 120
        state: started

    - name: Pobierz IP drugiej VM
      shell: virsh domifaddr {{ vm2_name }} | grep -oP '(\d{1,3}\.){3}\d{1,3}' | head -n1
      register: vm2_ip_result
      retries: 10
      delay: 3
      until: vm2_ip_result.stdout != ""
      changed_when: false

    - name: Poczekaj aż port SSH (22) będzie otwarty
      wait_for:
        host: "{{ vm2_ip_result.stdout }}"
        port: 22
        delay: 5
        timeout: 120
        state: started

    - name: Dodaj vm1 do inventory
      add_host:
        name: "{{ vm1_name }}"
        ansible_host: "{{ vm1_ip_result.stdout }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups: dynamic_vms

    - name: Dodaj vm2 do inventory
      add_host:
        name: "{{ vm2_name }}"
        ansible_host: "{{ vm2_ip_result.stdout }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups: dynamic_vms

- name: "Setup firewalla"
  hosts: dynamic_vms
  become: true
  vars_files:
    - ../vars/scenario_7.yaml

  tasks:
    - name: Konfiguracja reguł zapory
      shell: |
        ufw allow 22
        ufw allow 80
        ufw --force enable


- name: "Provisioning: test dostepnosci i test komunikacji"
  hosts: dynamic_vms
  become: true
  vars_files:
    - ../vars/scenario_7.yaml

  tasks:
    - name: Install sshpass and nmap
      apt:
        name:
          - sshpass
          - nmap
        state: present
        update_cache: yes

    - name: Testuj dostęp do portu 22 (SSH) na drugiej VM
      shell: >
        sshpass -p 'ubuntu'
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22 ubuntu@{{ hostvars[vm2_name].ansible_host }} echo "SSH działa" || echo "Brak odpowiedzi SSH"
      register: ssh_test
      when: inventory_hostname == vm1_name
      ignore_errors: true

    - name: Pokaż wynik testu SSH
      debug:
        var: ssh_test.stdout_lines
      when: inventory_hostname == vm1_name

    - name: Testuj dostęp do portu 80 (HTTP) na drugiej VM
      shell: curl {{ hostvars[vm2_name].ansible_host }}
      register: http_test
      when: inventory_hostname == vm1_name
      ignore_errors: true

    - name: Pokaż wynik testu HTTP
      debug:
        var: http_test.stdout_lines
      when: inventory_hostname == vm1_name

    - name: Testuj dostęp do portu 8080 (blokowany)
      shell: curl -m 5 {{ hostvars[vm2_name].ansible_host }}:8080
      register: http_8080_test
      when: inventory_hostname == vm1_name
      ignore_errors: true

    - name: Pokaż wynik testu HTTP 8080
      debug:
        var: http_8080_test.stdout_lines
      when: inventory_hostname == vm1_name

    - name: Testuj ping do drugiej VM
      shell: ping -c 3 {{ hostvars[vm2_name].ansible_host }}
      register: ping_test
      when: inventory_hostname == vm1_name
      ignore_errors: true

    - name: Pokaż wynik testu ping
      debug:
        var: ping_test.stdout_lines
      when: inventory_hostname == vm1_name

    - name: Testuj dostęp do portów za pomocą nmap
      shell: nmap -p 22,80,8080 {{ hostvars[vm2_name].ansible_host }}
      register: nmap_test
      when: inventory_hostname == vm1_name
      ignore_errors: true

    - name: Pokaż wynik testu nmap
      debug:
        var: nmap_test.stdout_lines
      when: inventory_hostname == vm1_name
