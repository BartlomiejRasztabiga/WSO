- name: "Scenariusz 2: Tworzenie dwóch VM w NAT"
  hosts: localhost
  become: true
  vars_files:
    - ../vars/scenario_2.yaml

  tasks:
    - name: Tworzenie sieci NAT (rola network)
      include_role:
        name: network

    - name: Utwórz vm1
      include_role:
        name: vm
      vars:
        vm_name: "{{ vm1_name }}"
        vm_disk: "{{ vm1_disk }}"
        vm_ci_iso: "{{ vm1_ci_iso }}"

    - name: Utwórz vm2
      include_role:
        name: vm
      vars:
        vm_name: "{{ vm2_name }}"
        vm_disk: "{{ vm2_disk }}"
        vm_ci_iso: "{{ vm2_ci_iso }}"

    - name: Pobierz IP vm1
      shell: virsh domifaddr {{ vm1_name }} | grep -oP '(\d{1,3}\.){3}\d{1,3}' | head -n1
      register: vm1_ip_result
      retries: 10
      delay: 3
      until: vm1_ip_result.stdout != ""
      changed_when: false

    - name: Pobierz IP vm2
      shell: virsh domifaddr {{ vm2_name }} | grep -oP '(\d{1,3}\.){3}\d{1,3}' | head -n1
      register: vm2_ip_result
      retries: 10
      delay: 3
      until: vm2_ip_result.stdout != ""
      changed_when: false

    - name: Dodaj vm1 do inventory
      add_host:
        name: "{{ vm1_name }}"
        ansible_host: "{{ vm1_ip_result.stdout }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups: dynamic_vms

    - name: Dodaj vm2 do inventory
      add_host:
        name: "{{ vm2_name }}"
        ansible_host: "{{ vm2_ip_result.stdout }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups: dynamic_vms

    - name: Dopisz vm1 do inventory/hosts
      blockinfile:
        path: "{{ playbook_dir }}/../inventory/hosts"
        marker: "# {mark} DYNAMIC INVENTORY FOR {{ vm1_name }}"
        block: |
          [dynamic_vms]
          {{ vm1_name }} ansible_host={{ vm1_ip_result.stdout }} ansible_user=ubuntu ansible_ssh_common_args='-o StrictHostKeyChecking=no'

    - name: Dopisz vm2 do inventory/hosts
      blockinfile:
        path: "{{ playbook_dir }}/../inventory/hosts"
        marker: "# {mark} DYNAMIC INVENTORY FOR {{ vm2_name }}"
        block: |
          [dynamic_vms]
          {{ vm2_name }} ansible_host={{ vm2_ip_result.stdout }} ansible_user=ubuntu ansible_ssh_common_args='-o StrictHostKeyChecking=no'

- name: "Provisioning: test dostepnosci i test komunikacji"
  hosts: dynamic_vms
  become: true
  vars_files:
    - ../vars/scenario_2.yaml

  tasks:
    - name: Ping test do localhost (czy SSH działa)
      ping:

    - name: Wyświetl hostname
      command: hostname
      register: hostname_out

    - name: Pinguj vm2 z vm1
      shell: ping -c 2 {{ hostvars[vm2_name].ansible_host }}
      register: ping_output
      when: inventory_hostname == vm1_name
      ignore_errors: true

    - name: Pokaż wynik pinga vm1 -> vm2
      debug:
        var: ping_output.stdout_lines
      when: inventory_hostname == vm1_name and ping_output is defined

    - name: Pinguj vm1 z vm2
      shell: ping -c 2 {{ hostvars[vm1_name].ansible_host }}
      register: ping_output
      when: inventory_hostname == vm2_name
      ignore_errors: true

    - name: Pokaż wynik pinga vm2 -> vm1
      debug:
        var: ping_output.stdout_lines
      when: inventory_hostname == vm2_name and ping_output is defined

    - name: Sprawdź dostęp do internetu (ping 8.8.8.8)
      shell: ping -c 2 8.8.8.8
      register: internet_ping
      ignore_errors: true

    - name: Pokaż wynik pinga do internetu
      debug:
        var: internet_ping.stdout_lines

    - name: Sprawdź próbę dostępu do hosta (brama domyślna)
      shell: ip route | grep default | awk '{print $3}' | xargs -I {} ping -c 2 {}
      register: host_ping
      ignore_errors: true

    - name: Pokaż wynik pinga do hosta
      debug:
        var: host_ping.stdout_lines

    - name: Sprawdź próbę dostępu do urządzenia w sieci hosta
      shell: ping -c 2 {{ external_test_ip }}
      register: external_ping
      ignore_errors: true

    - name: Pokaż wynik pinga do sieci hosta
      debug:
        var: external_ping.stdout_lines