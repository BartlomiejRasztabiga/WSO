- name: "Scenariusz 3: Dwie VM w bridge"
  hosts: localhost
  become: true
  vars_files:
    - ../vars/scenario_3.yaml

  tasks:
    - name: Tworzenie sieci bridge (rola network)
      include_role:
        name: network

    - name: Twórz vm1
      include_role:
        name: vm
      vars:
        vm_name: "{{ vm1_name }}"
        vm_disk: "{{ vm1_disk }}"
        vm_ci_iso: "{{ vm1_ci_iso }}"

    - name: Twórz vm2
      include_role:
        name: vm
      vars:
        vm_name: "{{ vm2_name }}"
        vm_disk: "{{ vm2_disk }}"
        vm_ci_iso: "{{ vm2_ci_iso }}"

    - name: Pobierz MAC adres VM1
      shell: virsh dumpxml {{ vm1_name }} | grep "mac address" | head -n1 | grep -oP '([0-9a-f]{2}:){5}[0-9a-f]{2}'
      register: vm1_mac

    - name: Pobierz MAC adres VM2
      shell: virsh dumpxml {{ vm2_name }} | grep "mac address" | head -n1 | grep -oP '([0-9a-f]{2}:){5}[0-9a-f]{2}'
      register: vm2_mac

    - name: Czekaj aż VM1 pojawi się w tablicy ARP
      shell: ip neigh | grep "{{ vm1_mac.stdout }}" | grep -oP '(\d{1,3}\.){3}\d{1,3}'
      register: vm1_ip_result
      retries: 15
      delay: 5
      until: vm1_ip_result.stdout != ""

    - name: Czekaj aż VM2 pojawi się w tablicy ARP
      shell: ip neigh | grep "{{ vm2_mac.stdout }}" | grep -oP '(\d{1,3}\.){3}\d{1,3}'
      register: vm2_ip_result
      retries: 15
      delay: 5
      until: vm2_ip_result.stdout != ""

    - name: Dodaj vm1 do inventory
      add_host:
        name: "{{ vm1_name }}"
        ansible_host: "{{ vm1_ip_result.stdout }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups: dynamic_vms

    - name: Dodaj vm2 do inventory
      add_host:
        name: "{{ vm2_name }}"
        ansible_host: "{{ vm2_ip_result.stdout }}"
        ansible_user: ubuntu
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups: dynamic_vms

- name: "Provisioning: test sieci bridge"
  hosts: dynamic_vms
  become: true
  vars_files:
    - ../vars/scenario_3.yaml
  tasks:
    - name: Ping test
      ping:

    - name: Wyświetl hostname
      command: hostname
      register: hostname_out

    - name: Pinguj vm2 z vm1
      shell: ping -c 2 {{ hostvars[vm2_name].ansible_host }}
      register: ping_output
      when: inventory_hostname == vm1_name
      ignore_errors: true

    - name: Pokaż wynik pinga vm1 -> vm2
      debug:
        var: ping_output.stdout_lines
      when: inventory_hostname == vm1_name and ping_output is defined

    - name: Pinguj vm1 z vm2
      shell: ping -c 2 {{ hostvars[vm1_name].ansible_host }}
      register: ping_output
      when: inventory_hostname == vm2_name
      ignore_errors: true

    - name: Pokaż wynik pinga vm2 -> vm1
      debug:
        var: ping_output.stdout_lines
      when: inventory_hostname == vm2_name and ping_output is defined

    - name: Sprawdź dostęp do internetu
      shell: ping -c 2 8.8.8.8
      register: internet_ping
      ignore_errors: true

    - name: Debug ping do internetu
      debug:
        var: internet_ping.stdout_lines

    - name: Sprawdź próbę dostępu do hosta (brama domyślna)
      shell: ip route | grep default | awk '{print $3}' | xargs -I {} ping -c 2 {}
      register: host_ping
      ignore_errors: true

    - name: Pokaż wynik pinga do hosta
      debug:
        var: host_ping.stdout_lines

    - name: Sprawdź dostęp do urządzenia w sieci hosta (router, itp.)
      shell: ping -c 2 {{ external_test_ip }}
      register: external_ping
      ignore_errors: true

    - name: Debug ping do LAN (powinien działać)
      debug:
        var: external_ping.stdout_lines

- name: Walidacja adresu i pingowanie VM z hosta
  hosts: localhost
  become: true
  vars_files:
    - ../vars/scenario_3.yaml
  tasks:
    - name: "Asercja: vm1 ma IP z podsieci 192.168.0.x"
      assert:
        that:
          - "'192.168.0.' in hostvars[vm1_name].ansible_host"
        fail_msg: "vm1 nie ma IP z sieci LAN"
        success_msg: "vm1 ma poprawny adres LAN: {{ hostvars[vm1_name].ansible_host }}"

    - name: "Asercja: vm2 ma IP z podsieci 192.168.0.x"
      assert:
        that:
          - "'192.168.0.' in hostvars[vm2_name].ansible_host"
        fail_msg: "vm2 nie ma IP z sieci LAN"
        success_msg: "vm2 ma poprawny adres LAN: {{ hostvars[vm2_name].ansible_host }}"

    - name: Test ping z hosta do vm1
      shell: ping -c 2 {{ hostvars[vm1_name].ansible_host }}
      register: ping_vm1
      failed_when: ping_vm1.rc != 0

    - name: Debug wynik pinga do vm1
      debug:
        var: ping_vm1.stdout_lines

    - name: Test ping z hosta do vm2
      shell: ping -c 2 {{ hostvars[vm2_name].ansible_host }}
      register: ping_vm2
      failed_when: ping_vm2.rc != 0

    - name: Debug wynik pinga do vm2
      debug:
        var: ping_vm2.stdout_lines
